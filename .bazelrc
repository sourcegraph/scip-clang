# Not sure why setting all of these is necessary, but just setting cxxopt
# Leads to usage of old C++ version when compiling LLVM, which needs C++14 or newer.
build --cxxopt="-std=c++20" --host_cxxopt="-std=c++20" --client_env=BAZEL_CXXOPTS="-std=c++20"
# We're using C++20 to access new methods on string_view
# and operator<=> which simplifies comparisons

# Per grailbio/bazel-toolchain docs
build --incompatible_enable_cc_toolchain_resolution

build --copt="-Wall" --copt="-Wextra" --copt="-Wwrite-strings" --copt="-Wcast-qual" --copt="-Wmissing-field-initializers" --copt="-Wimplicit-fallthrough" --copt="-Wcovered-switch-default" --copt="-Wsuggest-override" --copt="-Wstring-concatenation" --copt="-Wstring-conversion" --copt="-Wmisleading-indentation"

# For dependencies with .BUILD files in third_party, prefer adding flags there
# instead of here to avoid rebuilding lots of stuff on flag changes.
build --per_file_copt="external/.*@-Wno-cast-qual" # boost and protobuf
build --per_file_copt="external/.*@-Wno-covered-switch-default" # boost and protobuf
build --per_file_copt="external/.*@-Wno-unused-parameter" # LLVM and protobuf
build --per_file_copt="external/llvm-project/.*@-Wno-deprecated-anon-enum-enum-conversion"
build --per_file_copt="external/llvm-project/.*@-Wno-ambiguous-reversed-operator" # C++20 warning
build --per_file_copt="external/com_google_protobuf/.*@-Wno-deprecated-declarations" # sprintf on macOS
build --per_file_copt="external/com_google_protobuf/.*@-Wno-unused-function"

build:dev --strip=never
build:dev --copt="-DFORCE_DEBUG=1"
build:dev --copt="-DLLVM_ENABLE_ASSERTIONS=1"
build:dev --copt="-Og"
build:dev --copt="-gline-tables-only" --copt="-fno-omit-frame-pointer"

build:dev --copt="-fsanitize=address" --linkopt="-fsanitize=address"
build:dev --copt="-DADDRESS_SANITIZER" # for Abseil
# The --no-sanitizer=vptr,function is in line with LLVM"s default UBSan flags.
# https://sourcegraph.com/github.com/llvm/llvm-project@abf399737ea8bf6a6af4d66fc21a250a5dc76b6d/-/blob/llvm/CMakeLists.txt?L640&subtree=true
build:dev --copt="-fsanitize=undefined" --copt="-fno-sanitize=vptr,function" --copt="-fno-sanitize-recover=all"

build:dev --copt="-Wno-macro-redefined"
# ASan uses #define _FORTIFY_SOURCE 0 but Bazel passes
# -D_FORTIFY_SOURCE=1 by default. This is fixed by
# https://github.com/bazelbuild/bazel/pull/12772
# but I can't figure out how to use that, so hack it in for now.
