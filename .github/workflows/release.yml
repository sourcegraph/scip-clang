name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      revision:
        description: 'Tag or revision to build binaries for'
        type: string
        required: true
      create_release:
        description: 'Should publish the binary or not'
        required: true
        default: 'false'

jobs:
  build-and-upload-artifacts:
    name: 'Build and upload artifacts'
    strategy:
      matrix:
        platform: ['ubuntu-20.04', 'macos-12', 'windows-2022']
        config: ['dev', 'release']
    runs-on: ${{ matrix.platform }}
    env:
      TAG: ${{ github.event.ref }}
    steps:
      - uses: actions/checkout@v3
      - name: 'üêç Install Bazelisk'
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            choco install bazelisk
          else
            sudo npm install -g @bazel/bazelisk
          fi
      - id: auth
        name: 'üîì Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          create_credentials_file: true
      - name: 'üöß Build scip-clang'
        run: |
          echo "build --remote_cache=$CI_BAZEL_REMOTE_CACHE --google_default_credentials" > ci.bazelrc
          bazel build //indexer:scip-clang --config="$CONFIG" --execution_log_binary_file=log
        env:
          CONFIG: ${{ matrix.config }}
          CI_BAZEL_REMOTE_CACHE: 'https://storage.googleapis.com/sourcegraph_bazel_cache'
      - name: 'üîé Identify OS'
        run: echo "OS=$(uname -s | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
      - name: 'ü™µ Upload log'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.OS }}-${{ matrix.config }}-build-log
          path: log
      - name: ${{ format('ü™Ñ Rename binary ({0})', matrix.config) }}
        run: |
          SUFFIX="-dev"
          if [ "$CONFIG" == "release" ]; then
            SUFFIX=""
          fi
          outBinaryPath="scip-clang${SUFFIX}-$(uname -m)-$OS"
          cp bazel-bin/main/scip-ruby "$outBinaryPath"
          echo "outBinaryPath=$outBinaryPath" >> "$GITHUB_ENV"
          echo "suffix=$SUFFIX" >> "$GITHUB_ENV"
        env:
          OS: ${{ env.OS }}
          CONFIG: ${{ matrix.config }}
      - name: ${{ format('üì¶ Store binary ({0})', matrix.config) }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}-${{ matrix.config }}-release-artifacts
          path: ${{ env.outBinaryPath }}

  create-release:
    name: 'Create release'
    if: github.event_name != 'workflow_dispatch' || inputs.create_release
    needs: build-and-upload-artifacts
    runs-on: 'ubuntu-20.04'
    steps:
      - uses: actions/checkout@v3
      - name: 'üìù Create Release'
        run: |
          REV="$INPUT_REVISION"
          if [ "$TRIGGER" != "workflow_dispatch" ]; then
            REV="${GITHUB_REF/refs\/tags\//}"
          fi
          TEMPLATE="$(< .github/workflows/release-template.md)"
          echo "${TEMPLATE//TAG_PLACEHOLDER/$TAG}" > notes
          gh release create "$REV" --title "scip-clang $REV" --notes-file notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TRIGGER: ${{ github.event_name }}
          INPUT_REVISION: ${{ inputs.revision }}
      # Download everything to avoid spelling out the different
      # platforms here.
      - name: 'üì• Download all artifacts'
        uses: actions/download-artifact@v3
      - name: 'üì§ Upload artifacts for release'
        run: gh release upload "${GITHUB_REF/refs\/tags\//}" ./*-release-artifacts/*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}